The idea is to maintain a maximum (positive-sum) subarray “ending” at each index of the given array. 
This subarray is either empty (in which case its sum is zero) or consists of one more element than the maximum subarray ending at the previous index.

class Solution
{
    // Function to find the maximum sum of a contiguous subarray
    // in a given integer array
    public static int kadane(int[] arr)
    {
        // stores the maximum sum subarray found so far
        int maxSoFar = 0;
 
        // stores the maximum sum of subarray ending at the current position
        int maxEndingHere = 0;
 
        // traverse the given array
        for (int i: arr)
        {
            // update the maximum sum of subarray "ending" at index 'i' (by adding the
            // current element to maximum sum ending at previous index 'i-1')
            maxEndingHere = maxEndingHere + i;
 
            maxEndingHere = Integer.max(maxEndingHere, 0);
 
            // update the result if the current subarray sum is found to be greater
            int j = maxEndingHere +j;
            System.out.println("intermediate value" + j);
            maxSoFar = Integer.max(maxSoFar, maxEndingHere);
        }
 
        return maxSoFar;
    }
 
    public static void main(String[] args)
    {
        int[] arr = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
 
        System.out.println("The sum of contiguous subarray with the " +
                            "largest sum is " + kadane(arr));
    }
}
